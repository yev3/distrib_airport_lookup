/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "places-airports.h"
#include <iostream>

char* airportsHost;

airports_ret *airports_prog_1(location *locReq)
{
  char* host = airportsHost;
	CLIENT *clnt;
	airports_ret  *airpResults;

#ifndef	DEBUG
	clnt = clnt_create (host, AIRPORTS_PROG, AIRPORTS_VERS, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
#endif	/* DEBUG */

	airpResults = airports_qry_1(locReq, clnt);
	if (airpResults == (airports_ret *) NULL) {
		clnt_perror (clnt, "call failed");
	} else {
	  
	}

#ifndef	DEBUG
	clnt_destroy (clnt);
#endif	 /* DEBUG */

  return airpResults;
}


places_ret *
places_qry_1_svc(places_req *argp, struct svc_req *rqstp)
{
  static places_ret  result = { 0 };

  std::cout << "places received a request: " << argp->places_req_u.named.name << ", " << argp->places_req_u.named.state << std::endl;

  result.err = 0;
  place &pl = result.places_ret_u.results.request;
  pl.name = "city name";
  pl.state = "AZ";
  pl.loc = { 0.2, 0.4 };

  // TODO: code to lookup the lat + long of the place

  location placeLocation{ 0.3, -0.2 };
  airports_ret * airportsRet = airports_prog_1(&placeLocation);

  if(airportsRet->err) {
    printf("Error: %s\n", airportsRet->airports_ret_u.error_msg);
  } else {
    memcpy(&result.places_ret_u.results.results,
           &airportsRet->airports_ret_u.results,
           sizeof(airports));
  }

	return &result;
}


