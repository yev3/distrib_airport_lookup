/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "places-airports.h"
#include <iostream>
#include <random>
#include <chrono>
#include <iomanip>
#include <thread>

std::default_random_engine dre((std::random_device())());
std::uniform_real_distribution<double> distr{};

airports_ret * air_qry_1_svc(location_s *argp, struct svc_req *rqstp)
{
  using namespace std::chrono_literals;
	static airports_ret  result;

  std::cout << "Airports got a request lat: " 
            << argp->latitude << ", long: " << argp->longitude << std::endl;

  const int sleepDurSecs = distr(dre) * 5000;
  std::cout << "Airports server sleeping for " << sleepDurSecs << " ms" << std::endl;
  std::this_thread::sleep_for(std::chrono::milliseconds(sleepDurSecs));
  result.err = 0;

  std::cout << "done sleeping" << std::endl;

  static airp_dist_t sampleResults[5] = {0};
  for (int i = 0; i < 5; ++i) {
    sampleResults[i].airport.loc.latitude = distr(dre) - 0.5;
    sampleResults[i].airport.loc.longitude = distr(dre) - 0.5;
    sampleResults[i].airport.code = (char*)"abc";
    sampleResults[i].airport.name = (char*)"sample";
    sampleResults[i].airport.state = (char*)"WA";
    sampleResults[i].distance = distr(dre);
  }

  result.airports_ret_u
        .airports
        .airp_dist_recs_t_len = 5;

  result.airports_ret_u
        .airports
        .airp_dist_recs_t_val = (airp_dist_t *)&sampleResults;

  std::cout << "Returning result" << std::endl;
	return &result;
}
