/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "places-airports.h"
#include <iostream>

void
places_prog_1(char *host, client_req_t *req)
{
	CLIENT *clnt;
	places_ret  *placesResult;

  std::cout << "Creating a connection..";

#ifndef	DEBUG
	clnt = clnt_create (host, PLACES_PROG, PLACES_VERS, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
#endif	/* DEBUG */

  std::cout << "done." << std::endl;;

  std::cout << "Querying: " << req->city << ", " << req->state << std::endl;


	placesResult = places_qry_1(req, clnt);
	if (placesResult == (places_ret *) NULL) {
		clnt_perror (clnt, "call failed");
	}

  std::cout << "Result: " << std::endl;
  std::cout << "Err: " << placesResult->err << std::endl;
  if (placesResult->err) {
    std::cout << "Error occured: " << placesResult->places_ret_u.error_msg << std::endl;
  } else {
    places_result_s &plResult = placesResult->places_ret_u.result;
    std::cout << plResult.place << std::endl;
    airp_dist_t * airResult = plResult.airports.airp_dist_recs_t_val;
    for (int i = 0; i < plResult.airports.airp_dist_recs_t_len; ++i) {
      std::cout << "--- " << i + 1 << " ---" << std::endl;
      std::cout << "lat:   " << airResult[i].airport.loc.latitude << std::endl;
      std::cout << "long:  " << airResult[i].airport.loc.longitude << std::endl;
      std::cout << "code:  " << airResult[i].airport.code << std::endl;
      std::cout << "name:  " << airResult[i].airport.name << std::endl;
      std::cout << "state: " << airResult[i].airport.state << std::endl;
      std::cout << "dist:  " << airResult[i].distance << std::endl;
      std::cout << std::endl;
    }
  }

#ifndef	DEBUG
	clnt_destroy (clnt);
#endif	 /* DEBUG */
}

airports_ret* airports_prog_1(char *host, location_s *loc)
{
	CLIENT *clnt;
	airports_ret *airportsFromServer;

#ifndef	DEBUG
	clnt = clnt_create (host, AIRPORTS_PROG, AIRPORTS_VERS, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
#endif	/* DEBUG */

	airportsFromServer = air_qry_1(loc, clnt);
	if (airportsFromServer == (airports_ret *) NULL) {
		clnt_perror (clnt, "call failed");
	}

#ifndef	DEBUG
	clnt_destroy (clnt);
#endif	 /* DEBUG */

  return airportsFromServer;
}

int main (int argc, char *argv[])
{
	char *host;

	if (argc < 2) {
		printf ("usage: %s server_host\n", argv[0]);
		exit (1);
	}
	host = argv[1];

  // Sample test data
  client_req_t sampleReq;
  sampleReq.city = "Seattle";
  sampleReq.state = "wA";

  location_s loc{ 0.5, 0.5 };
  airports_ret * airportsRet = airports_prog_1(host, &loc);

	//places_prog_1 (host, &sampleReq);
exit (0);
}
